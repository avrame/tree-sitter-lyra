=============================================
Basic Function declaration without parameters
=============================================

fn foo() {
  // do stuff
}

---

(program
  (function_declaration
    (identifier)
    (parameter_list)
    (block
      (comment))))

==============================================================
Basic Function declaration without parameters with return type
==============================================================

fn foo() -> Int {
  return 0
}

---

(program
  (function_declaration
    (identifier)
    (parameter_list)
    (return_type_notation
      (signed_integer_type))
    (block
      (return_statement
        (integer)))))

==========================================
Basic Function declaration with parameters
==========================================

fn sum (a: Int, b: Int) -> Int {
  return a + b
}

---

(program
  (function_declaration
    (identifier)
    (parameter_list
      (parameter
        (identifier)
        (type_notation
          (signed_integer_type)))
      (parameter
        (identifier)
        (type_notation
          (signed_integer_type))))
    (return_type_notation
      (signed_integer_type))
    (block
      (return_statement
        (addition
          (identifier)
          (identifier))))))

==================================================
Basic Function declaration with generic parameters
==================================================

fn sum<n> (a: n, b: n) -> n {
  return a + b
}

---

(program
  (function_declaration
    (identifier)
    (generic_parameters
      (generic_type))
    (parameter_list
      (parameter
        (identifier)
        (type_notation
          (generic_type)))
      (parameter
        (identifier)
        (type_notation
          (generic_type))))
    (return_type_notation
      (generic_type))
    (block
      (return_statement
        (addition
          (identifier)
          (identifier))))))

==================================
Function declaration with defaults
==================================

fn product (a: Int, b: Int = 10) -> Int {
  return a * b
}

---

(program
  (function_declaration
    (identifier)
    (parameter_list
      (parameter
        (identifier)
        (type_notation
          (signed_integer_type)))
      (parameter
        (identifier)
        (type_notation
          (signed_integer_type))
        (default_value
          (integer))))
    (return_type_notation
      (signed_integer_type))
    (block
      (return_statement
        (multiplication
          (identifier)
          (identifier))))))

=====================
Higher order function
=====================

fn map<t,u>(array: Array<t>, func: (t) -> u) -> Array<u> {
//  new_array: Array<u,array.len()> = []
//  for item in array {
//    new_array.push(func(item))
//  }
//  new_array
}

---

(program
  (function_declaration
    (identifier)
    (generic_parameters
      (generic_type)
      (generic_type))
    (parameter_list
      (parameter
        (identifier)
        (type_notation
          (array_type
            (generic_type))))
      (parameter
        (identifier)
        (type_notation
          (function_type
            (function_type_parameter_list
              (generic_type))
            (generic_type)))))
    (return_type_notation
      (array_type
        (generic_type)))
    (block
      (comment)
      (comment)
      (comment)
      (comment)
      (comment))))

========================================
Basic Function call with named arguments
========================================

let result = sum(a=1, b=2)

---

(program
  (declaration
    (identifier)
    (postfix_expression
      (identifier)
      (function_call
        (named_argument
          (argument_name)
          (value
            (integer)))
        (named_argument
          (argument_name)
          (value
            (integer)))))))

============================================
Basic Function call with partial application
============================================

let add_one = sum(1, _)
let result = add_one(b=2)
// result == 3

---

(program
  (declaration
    (identifier)
    (postfix_expression
      (identifier)
      (function_call
        (value
          (integer))
        (wildcard))))
  (declaration
    (identifier)
    (postfix_expression
      (identifier)
      (function_call
        (named_argument
          (argument_name)
          (value
            (integer))))))
  (comment))

===
call with space
===

f ()

---

(program
  (postfix_expression
    (identifier)
    (function_call)))

===
qualified call with space
===

ns.f ()

---

(program
  (postfix_expression
    (postfix_expression
      (identifier)
      (identifier))
    (function_call)))