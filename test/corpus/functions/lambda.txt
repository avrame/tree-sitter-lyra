======================
Simple Lambda Function
======================

let sum: (Int, Int) -> Int = (a, b) => a + b

---

(program
  (declaration
    (identifier)
    (type_notation
      (function_type
        (function_type_parameter_list
          (signed_integer_type)
          (signed_integer_type))
        (signed_integer_type)))
    (lambda_expression
      (function_pattern
        (parameter_list
          (parameter
            (identifier))
          (parameter
            (identifier)))
        (addition
          (identifier)
          (identifier))))))

==============================
Function that returns a lambda
==============================

def make_sum_fn: (Int) -> (Int) -> Int where
(a) => {
  return (b) => a + b
}

---

(program
  (function_definition
    (function_signature
      (identifier)
      (function_type
        (function_type_parameter_list
          (signed_integer_type))
        (function_type
          (function_type_parameter_list
            (signed_integer_type))
          (signed_integer_type))))
    (function_pattern
      (parameter_list
        (parameter
          (identifier)))
      (block
        (return_statement
          (lambda_expression
            (function_pattern
              (parameter_list
                (parameter
                  (identifier)))
              (addition
                (identifier)
                (identifier)))))))))