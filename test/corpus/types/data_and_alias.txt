===========================
Data type like a basic enum
===========================

data ColorName = Red | Green | Blue

-----------

(program
  (type_declaration
    (data_type
      (data_type_name)
      (data_type_constructor_name)
      (data_type_constructor_name)
      (data_type_constructor_name))))

================================
Data type with Generic Parameter
================================

data Maybe<t> = Nil | Some t

--------------------------------

(program
  (type_declaration
    (data_type
      (data_type_name)
      (generic_parameters
        (generic_type))
      (data_type_constructor_name)
      (data_type_constructor_name)))
  (identifier))

================
Data type - Tree
================

data Tree<t> = Nil | Leaf t | Node { left: Tree, value: t, right: Tree }

--------------------------------

(program
  (type_declaration
    (data_type
      (data_type_name)
      (generic_parameters
        (generic_type))
      (data_type_constructor_name)
      (data_type_constructor_name)))
  (identifier)
  (ERROR)
  (struct_literal
    (struct_name)
    (field_name)
    (ERROR
      (user_defined_type_name)
      (UNEXPECTED 'l'))
    (field_value
      (identifier))
    (ERROR
      (identifier)
      (user_defined_type_name))))

====================================
Complex Data type with various types
====================================

data CSSColor =
  | ColorName CSSColorName
  | RGB { r: Int8, g: Int8, b: Int8 }
  | HSL { hue: Hue, sat: Float, light: Float, alpha: Alpha }

data Hue = HueDeg Angle | HueRadian Radian | HueTurn Turn

---

(program
  (type_declaration
    (data_type
      (data_type_name)
      (data_type_constructor_name)
      (user_defined_type_name)
      (data_type_constructor_name)
      (struct_type_body
        (field_name)
        (field_type
          (signed_integer_type))
        (field_name)
        (field_type
          (signed_integer_type))
        (field_name)
        (field_type
          (signed_integer_type)))
      (data_type_constructor_name)
      (struct_type_body
        (field_name)
        (field_type
          (user_defined_type_name))
        (field_name)
        (field_type
          (user_defined_type_name))
        (field_name)
        (field_type
          (user_defined_type_name))
        (field_name)
        (field_type
          (user_defined_type_name)))))
  (type_declaration
    (data_type
      (data_type_name)
      (data_type_constructor_name)
      (user_defined_type_name)
      (data_type_constructor_name)
      (user_defined_type_name)
      (data_type_constructor_name)
      (user_defined_type_name))))

====================================
Basic Alias Type without constraints
====================================

alias Turn = Float

---

(program
  (type_declaration
    (alias_type
      (alias_type_name)
      (user_defined_type_name))))

===============================
Alias Type with enum constraint
===============================

alias CSSColorName = String where(enum="red" | "green" | "blue" | "rebeccapurple" | "aliceblue")

---

(program
  (type_declaration
    (alias_type
      (alias_type_name)
      (string_type)
      (constraints
        (constraint
          (enum_constraint
            (enum
              (enum_value
                (string_literal))
              (enum_value
                (string_literal))
              (enum_value
                (string_literal))
              (enum_value
                (string_literal))
              (enum_value
                (string_literal)))))))))

=================================
Alias Type with range constraints
=================================

alias Angle = Float where(range=0..360)
alias Radian = Float64 where(range=0..2*PI)
alias Alpha = Float32 where(range=0..1)

---

(program
  (type_declaration
    (alias_type
      (alias_type_name)
      (user_defined_type_name)
      (constraints
        (constraint
          (range_constraint
            (range
              (integer)
              (integer)))))))
  (type_declaration
    (alias_type
      (alias_type_name)
      (float_type)
      (constraints
        (constraint
          (range_constraint
            (range
              (integer)
              (constraint_multiplication
                (integer)
                (const_identifier))))))))
  (type_declaration
    (alias_type
      (alias_type_name)
      (float_type)
      (constraints
        (constraint
          (range_constraint
            (range
              (integer)
              (integer))))))))
